# src/cloud_simulator/pentest.py
"""
Módulo de pruebas ofensivas (pentesting simulado) para el entorno cloud.
Permite evaluar vulnerabilidades en IAM y almacenamiento de manera controlada.
"""

from typing import List
from .iam import User
from .storage import Bucket


class CloudPentest:
    """
    Clase para realizar pruebas de penetración simuladas.
    """

    def __init__(self, users: List[User], buckets: List[Bucket]):
        self.users = users
        self.buckets = buckets
        self.results = []

    def test_bucket_access(self):
        """
        Simula intentos de acceso a buckets por usuarios.
        - Si el bucket es público: acceso permitido
        - Si el bucket es privado: acceso restringido
        """
        for user in self.users:
            for bucket in self.buckets:
                if bucket.public:
                    self.results.append({
                        "Usuario": user.username,
                        "Bucket": bucket.name,
                        "Resultado": "ACCESO PERMITIDO",
                        "Detalle": "Bucket es público, acceso abierto."
                    })
                else:
                    self.results.append({
                        "Usuario": user.username,
                        "Bucket": bucket.name,
                        "Resultado": "ACCESO DENEGADO",
                        "Detalle": "Bucket privado, se requiere permiso explícito."
                    })

    def test_admin_actions(self):
        """
        Simula intentos de realizar acciones administrativas.
        Solo los usuarios con permisos '*' pueden hacerlo.
        """
        for user in self.users:
            perms = user.role.get_effective_permissions()
            if "*" in perms:
                self.results.append({
                    "Usuario": user.username,
                    "Acción": "Eliminar recurso crítico",
                    "Resultado": "PERMITIDO",
                    "Detalle": "Usuario tiene permisos administrativos."
                })
            else:
                self.results.append({
                    "Usuario": user.username,
                    "Acción": "Eliminar recurso crítico",
                    "Resultado": "DENEGADO",
                    "Detalle": "Usuario no tiene permisos administrativos."
                })

    def run_all_tests(self):
        """
        Ejecuta todas las pruebas de pentest.
        """
        self.test_bucket_access()
        self.test_admin_actions()
        return self.results
